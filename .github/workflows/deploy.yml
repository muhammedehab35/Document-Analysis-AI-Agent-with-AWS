name: Build and Deploy Docker to ECR on Push

on:
  push:
    branches: [main]  # if push should go to main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: clone the repository code to the runner
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: config for github actions to interact with AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: 
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      # Step 4: hash previous and current pushes
      - name: Get latest and previous push SHAs
        run: |
          # Fetch full history
          git fetch --prune --unshallow
          
          # Get the latest commit SHA (HEAD)
          latest_push_sha=$(git rev-parse HEAD)
          
          # Get the previous commit SHA (HEAD~1)
          previous_push_sha=$(git rev-parse HEAD~1)
          
          # Output commit SHAs to GitHub Actions environment variables
          echo "latest_push_sha=$latest_push_sha" >> $GITHUB_ENV
          echo "previous_push_sha=$previous_push_sha" >> $GITHUB_ENV

      # Step 5: 
      - name: Check for changes to relevant files
        id: check_changes
        run: |
          git diff --name-only ${{ env.previous_push_sha }} ${{ env.latest_push_sha }}

          changed_files=$(git diff --name-only ${{ env.previous_push_sha }} ${{ env.latest_push_sha }} | \
            grep -Ev '(^\.github/workflows/|^\.dockerignore$|^\.DS_Store$|^README\.md$)' || true)
      
          echo "changed_files=$changed_files"
      
          if [ -z "$changed_files" ]; then
            echo "build_and_push=false" >> $GITHUB_ENV
            echo "build_and_push=false" >> $GITHUB_OUTPUT
          else
            echo "build_and_push=true" >> $GITHUB_ENV
            echo "build_and_push=true" >> $GITHUB_OUTPUT
          fi

      # Step 7: Build and Push Docker Image if Needed
      - name: Build Docker image and push to ECR if changed
        if: steps.check_changes.outputs.build_and_push == 'true'
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 8: Register new ECS task definition revision
        # - retrieve current task definition from ECS using ECS CLI
        # - update task definition with new docker image URL
        # - create task definition JSON file with updated values
        # - register new task definition with ECS
        # - print new task definition revision number
        # - set new task definition revision number as env variable
      - name: Register new ECS task definition revision
        run: |
          task_definition=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }})
            
          new_task_definition=$(echo $task_definition | jq '.taskDefinition | .containerDefinitions[0].image = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest"')
            
          echo $new_task_definition | jq '{ family: .family, containerDefinitions: .containerDefinitions, requiresCompatibilities: ["FARGATE"], networkMode: "awsvpc", executionRoleArn: .executionRoleArn, taskRoleArn: .taskRoleArn, cpu: .cpu, memory: .memory }' > updated-task-definition.json
          new_task_definition_revision=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --query 'taskDefinition.revision' --output text)
          
          echo "New task definition revision: $new_task_definition_revision"
          echo "new_task_definition_revision=${new_task_definition_revision}" >> $GITHUB_ENV
      
          # Step 9: 
      - name: Update ECS service with new task definition
        run: |
          aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --service ${{ secrets.ECS_SERVICE }} \
          --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }}:$new_task_definition_revision